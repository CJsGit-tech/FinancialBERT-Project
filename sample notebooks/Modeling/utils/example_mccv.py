# -*- coding: utf-8 -*-
"""Example_mccv

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GZnTcXI2NUVQ9REcH-JwE1pPeLytb44Q

# 1. Import the MonteCarloCV class from mccv.ipynb notebook
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install import-ipynb

from google.colab import drive
import import_ipynb

# Mount drive
drive.mount("/content/drive")

# Commented out IPython magic to ensure Python compatibility.
# specify working directory
# %cd '/content/drive/MyDrive/MADS CAPSTONE/source code/Monte Carlo CV'

# Now can import the reference notebook with MonteCarloCV class
import mccv

# Now can import the MonteCarloCV class from mccv.ipynb
from mccv import MonteCarloCV

"""# 2. One example with SP500"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install yfinance

"""Get dates of SP500 for the training set 2015-01-01 to 2019-12-31"""

import yfinance as yf
df = yf.Ticker('^GSPC').history(start='2015-01-01',end='2019-12-31')

# instantiate CV

## leave 20% margin to randomly slide the training window. Gap=0 means the test test starts just after the last training observation.
mccv = MonteCarloCV(n_splits=10,train_size=0.6,test_size=0.2,gap=0,seed=42) 

# we will plot the folds on sp500 close. We need to reset index, but first lets make sure this is sorted ascending
import matplotlib.pyplot as plt
fig,axes = plt.subplots(2,5,figsize=(30,10))
df.sort_index(ascending=True,inplace=True)
sp_close = df.reset_index()[['Date','Close']]

for fold, (train_index, test_index) in enumerate(mccv.split(sp_close)):
  axes.flatten()[fold].plot(sp_close.iloc[train_index]['Date'],sp_close.iloc[train_index]['Close'],label='Close Train',c='red')
  axes.flatten()[fold].plot(sp_close.iloc[test_index]['Date'],sp_close.iloc[test_index]['Close'],label='Close Test')
  axes.flatten()[fold].legend()
  # check what is start and end date of fold
  fold_train_start_date = sp_close['Date'].dt.date.iloc[train_index[0]]
  fold_train_end_date = sp_close['Date'].dt.date.iloc[train_index[-1]]
  fold_test_start_date = sp_close['Date'].dt.date.iloc[test_index[0]]
  fold_test_end_date = sp_close['Date'].dt.date.iloc[test_index[-1]]

  axes.flatten()[fold].set_title(f'Fold {fold+1}\nTrain==> start: {fold_train_start_date} end:{fold_train_end_date}\nValidation==> start: {fold_test_start_date} end: {fold_test_end_date}')
plt.tight_layout()