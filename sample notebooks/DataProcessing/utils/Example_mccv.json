{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1. Import the MonteCarloCV class from mccv.ipynb notebook"],"metadata":{"id":"36xjbmmIFH-F"}},{"cell_type":"code","source":["# import the reference notebook with MonteCarloCV class\n","import mccv"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"id":"JtTnBzCjDtnV","outputId":"90d4b403-1863-46a7-f095-38f056ee1d1a","executionInfo":{"status":"error","timestamp":1680378887018,"user_tz":240,"elapsed":158,"user":{"displayName":"Marin Petel","userId":"17744305567413310762"}}},"execution_count":3,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-783e8f1d2eec>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Now can import the reference notebook with MonteCarloCV class\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mmccv\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'mccv'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["# Now can import the MonteCarloCV class from mccv.ipynb\n","from mccv import MonteCarloCV"],"metadata":{"id":"9ySDsDFQEzaQ","colab":{"base_uri":"https://localhost:8080/","height":321},"executionInfo":{"status":"error","timestamp":1680378906176,"user_tz":240,"elapsed":122,"user":{"displayName":"Marin Petel","userId":"17744305567413310762"}},"outputId":"ac1a4aa4-c06d-477e-8504-09596bcd89c0"},"execution_count":4,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-abdad422ad59>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Now can import the MonteCarloCV class from mccv.ipynb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mmccv\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mMonteCarloCV\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'mccv'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"markdown","source":["# 2. One example with SP500"],"metadata":{"id":"PU0CuxUAFQyv"}},{"cell_type":"code","source":["%%capture\n","!pip install yfinance"],"metadata":{"id":"khzGBGOOFVBF","executionInfo":{"status":"aborted","timestamp":1680378887019,"user_tz":240,"elapsed":8,"user":{"displayName":"Marin Petel","userId":"17744305567413310762"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Get dates of SP500 for the training set 2015-01-01 to 2019-12-31"],"metadata":{"id":"3mpeycKNF_Ym"}},{"cell_type":"code","source":["import yfinance as yf\n","df = yf.Ticker('^GSPC').history(start='2015-01-01',end='2019-12-31')"],"metadata":{"id":"CuMByrZ-Fcje","executionInfo":{"status":"aborted","timestamp":1680378887019,"user_tz":240,"elapsed":8,"user":{"displayName":"Marin Petel","userId":"17744305567413310762"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# instantiate CV\n","\n","## leave 20% margin to randomly slide the training window. Gap=0 means the test test starts just after the last training observation.\n","mccv = MonteCarloCV(n_splits=10,train_size=0.6,test_size=0.2,gap=0,seed=42) \n","\n","# we will plot the folds on sp500 close. We need to reset index, but first lets make sure this is sorted ascending\n","import matplotlib.pyplot as plt\n","fig,axes = plt.subplots(2,5,figsize=(30,10))\n","df.sort_index(ascending=True,inplace=True)\n","sp_close = df.reset_index()[['Date','Close']]\n","\n","for fold, (train_index, test_index) in enumerate(mccv.split(sp_close)):\n","  axes.flatten()[fold].plot(sp_close.iloc[train_index]['Date'],sp_close.iloc[train_index]['Close'],label='Close Train',c='red')\n","  axes.flatten()[fold].plot(sp_close.iloc[test_index]['Date'],sp_close.iloc[test_index]['Close'],label='Close Test')\n","  axes.flatten()[fold].legend()\n","  # check what is start and end date of fold\n","  fold_train_start_date = sp_close['Date'].dt.date.iloc[train_index[0]]\n","  fold_train_end_date = sp_close['Date'].dt.date.iloc[train_index[-1]]\n","  fold_test_start_date = sp_close['Date'].dt.date.iloc[test_index[0]]\n","  fold_test_end_date = sp_close['Date'].dt.date.iloc[test_index[-1]]\n","\n","  axes.flatten()[fold].set_title(f'Fold {fold+1}\\nTrain==> start: {fold_train_start_date} end:{fold_train_end_date}\\nValidation==> start: {fold_test_start_date} end: {fold_test_end_date}')\n","plt.tight_layout()"],"metadata":{"id":"V3Opl7roFt44","executionInfo":{"status":"aborted","timestamp":1680378887020,"user_tz":240,"elapsed":9,"user":{"displayName":"Marin Petel","userId":"17744305567413310762"}}},"execution_count":null,"outputs":[]}]}